extereme test for _easy_ based schedulers 

ask dror about the number of processors for CTC and the strangeness of SDSC-DS-2004
run probabilistic easy with different threashold parameter: 0.05, 0.1, 0.15 ....

loops: check that there are no removing of elements from a list while itterating on the list (use list_copy .... be fore itteration)   


run_simulator.py: extarct total number of processors from the log file itself "MaxProcs"

change this ugly line: self.cpu_snapshot.free_processors_available_at(current_time) >= self.unscheduled_jobs[0].num_required_processors


Change the LookAhead scheduler to give better statistics .........
	in look ahead easy:  assert if  job.backfill_flag == 1

commenting the code .....

profiling the code ....

add maui to the tests (take the system quality of service from somewhere ....) 

statistics: add mor harchol slowdowns criteria http://www.cs.cmu.edu/~harchol



----------------------------------------------- 

UnitTesters
example of unitesthttp://www.python.org/doc/2.3.2/lib/minimal-example.html
assertEqual() checks for an expected result. 
assert_() verifies a condition.
assertRaises() to verify that an expected exception gets raised.
/cs/par/users/ouaknine/simus/sim_orig

----------------------------------------------- 

Maui scheduler 

Dror's code: ~feit/src/sim/maui.c


/*
 * MAUI priorities depend on several factors with different weights.
 * we just consider a subset.
 */
static double   w_qtime;        /* weight of time spent in queue    */
static double   w_sld;          /* weight of slowdown (Xfactor)     */
static double   w_qos;          /* weight of desired QoS (user pri) */
static double   w_bypass;       /* weight of being skipped over     */
static double   w_dir;          /* weight of direct pri (admin pri) */
static double   w_size;         /* weight of job size (= nodes)     */




 
/*
 * calculate a job's priority MAUI style
 */

static double
pri( int job )
{
    double      wait;

    wait = glob_time - jobs_shaddow[job].t0;

    return( w_qtime  * wait
          + w_sld    * ((wait + jobs[job].estimate) / jobs[job].estimate)
          + w_qos    * jobs_shaddow[job].qos
          + w_dir    * jobs_shaddow[job].dir
          + w_bypass * jobs_shaddow[job].bypass
          + w_size   * jobs[job].size );
}

----------------------------------------------- 


Checking running time on real data: 

% time runfcfs -s ~/par/logs/l_lanl_cm5_cln.swf
1.028u 0.048s 0:01.19 89.0%     0+0k 0+0io 0pf+0w

% time runeasy -s ~/par/logs/l_lanl_cm5_cln.swf
0.892u 0.060s 0:00.97 97.9%     0+0k 0+0io 0pf+0w


